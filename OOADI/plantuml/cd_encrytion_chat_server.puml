@startuml
title Encryption chatroom Server
interface Socket{

}
class Server_Session_manager{
        Attributes
        ..
        +ChannelManagers:List
        --
        Method
        ..
        +listenUI():void
        +createP2Prequest):void
        +storeMessage():void
        +forwardMessage():void
}

Server_Session_manager "1" -left- "1" Socket

class Server{
        Attributes
        ..
        +IP:string
        +Session_manager:class
        +Channel_db_manager:class
        +User_db_manager:class
        --
        Methods
        ..
        +createChannelDBmanager():void
        +createUserDBmanager():void
        +createSessionManager():void
        +requestUserData():void
        +requestChannelData():void
        +forwardMessage():void
        +createUser():void
        +validateUser():void
        +createChannel():void
        +associateUser():void
        +peer2peerRequest():void
}

Server "1\n" <|-left- "*\n" Server_Session_manager

class User_db_manager{
        Method
        ..
        createAccount():void
        validateAccount():void
        lookupAccount():void     
}

User_db_manager "1\n" -left-|> "1\n" Server

package Account_db <<database>>{
        map Account_db {
                usernames => string
                password => enc_string
                associatedChannel => list
        }
}
User_db "1" -left-* "1" User_db_manager

class Channel_db_manager{
        Method
        ..
        createchannel():void
        associateUser():void
        lookupChannel():void
}


Server "1 \n" <|-up- "1 " Channel_db_manager
package Channel_db <<database>>{
        map Channel_db {
                channel_id => string
                channel_members => usernames
                Channel_Logs => 
        }
        object Channel_Log{
        Attributes
        ..
        encrypted_Timestamp
        encrypted_User
        encrypted_Message
        }
        Channel_db::Channel_Logs -right-> Channel_Log
}

Channel_db "1" -left-* "1" Channel_db_manager




@enduml